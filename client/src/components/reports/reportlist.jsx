import React, { useEffect, useState } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Typography,
  CircularProgress,
  Box,
  Button,
} from "@mui/material";
import { Download, PictureAsPdf } from "@mui/icons-material";
import axios from "axios";
import moment from "moment";
import { jsPDF } from "jspdf";
import * as XLSX from "xlsx";
import { fetchReports } from "../../services/reportService";

const ReportsList = () => {
  const [reports, setReports] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchReport = async () => {
      try {
        const data = await fetchReports();
        setReports(data);
      } catch (error) {
        console.error("Error fetching reports:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchReport();
  }, []);

  // Download report as PDF
  const handleDownloadPDF = (report) => {
    const doc = new jsPDF();
    doc.text("Report Details", 14, 10);
    doc.text(`Report Type: ${report.reportType}`, 10, 20);
    doc.text(`Generated By: ${report.generatedBy}`, 10, 30);
    doc.text(`Generated At: ${moment(report.generatedAt).format("DD MMM YYYY, hh:mm A")}`, 10, 40);
    doc.text("Data:", 10, 50);
    Object.entries(report.data).forEach(([key, value], index) => {
      doc.text(`${key}: ${value}`, 10, 60 + index * 10);
    });
    doc.save(`${report.reportType}.pdf`);
  };

  // Download individual report as Excel
  const handleDownloadRowExcel = (report) => {
    const worksheet = XLSX.utils.json_to_sheet([
      {
        "Report Type": report.reportType,
        "Generated By": report.generatedBy,
        "Generated At": moment(report.generatedAt).format("DD MMM YYYY, hh:mm A"),
        ...report.data,
      },
    ]);

    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Report");
    XLSX.writeFile(workbook, `${report.reportType}.xlsx`);
  };

  // Download all reports as Excel
  const handleDownloadExcel = () => {
    const worksheet = XLSX.utils.json_to_sheet(
      reports.map((report) => ({
        "Report Type": report.reportType,
        "Generated By": report.generatedBy,
        "Generated At": moment(report.generatedAt).format("DD MMM YYYY, hh:mm A"),
        ...report.data,
      }))
    );

    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Reports");
    XLSX.writeFile(workbook, "Reports.xlsx");
  };

  return (
    <Box sx={{ padding: 3 }}>
      <Typography variant="h5" sx={{ fontWeight: "bold", mb: 2 }}>
        ðŸ“Š Reports Dashboard
      </Typography>

      <Box sx={{ display: "flex", justifyContent: "flex-end", mb: 2 }}>
        <Button
          variant="contained"
          color="success"
          sx={{ mr: 2 }}
          onClick={handleDownloadExcel}
        >
          Download Excel
        </Button>
      </Box>

      {loading ? (
        <Box display="flex" justifyContent="center">
          <CircularProgress />
        </Box>
      ) : (
        <TableContainer component={Paper} sx={{ boxShadow: 3, borderRadius: 2 }}>
          <Table>
            <TableHead sx={{ backgroundColor: "#1976d2" }}>
              <TableRow>
                <TableCell sx={{ color: "white", fontWeight: "bold" }}>#</TableCell>
                <TableCell sx={{ color: "white", fontWeight: "bold" }}>Report Type</TableCell>
                <TableCell sx={{ color: "white", fontWeight: "bold" }}>Generated By</TableCell>
                <TableCell sx={{ color: "white", fontWeight: "bold" }}>Generated At</TableCell>
                <TableCell sx={{ color: "white", fontWeight: "bold" }}>Actions</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {reports.map((report, index) => (
                <TableRow key={report._id} hover>
                  <TableCell>{index + 1}</TableCell>
                  <TableCell>{report.reportType}</TableCell>
                  <TableCell>{report.generatedBy}</TableCell>
                  <TableCell>{moment(report.generatedAt).format("DD MMM YYYY, hh:mm A")}</TableCell>
                  <TableCell>
                    <Button
                      variant="contained"
                      color="primary"
                      startIcon={<Download />}
                      onClick={() => handleDownloadPDF(report)}
                      sx={{ mr: 1 }}
                    >
                      PDF
                    </Button>
                    <Button
                      variant="contained"
                      color="secondary"
                      startIcon={<Download />}
                      onClick={() => handleDownloadRowExcel(report)}
                    >
                      Excel
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      )}
    </Box>
  );
};

export default ReportsList;
